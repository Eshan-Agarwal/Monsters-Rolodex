{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","monster","className","alt","src","id","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qTAIaA,G,MAAO,SAAC,GAAD,IAAEC,EAAF,EAAEA,QAAF,OAEhB,sBAAKC,UAAU,iBAAf,UAEI,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAQI,GAAlC,4BACtB,mCAAOJ,EAAQK,KAAf,OACA,4BAAKL,EAAQM,aCLRC,G,MAAW,SAAC,GAAD,IAAEC,EAAF,EAAEA,SAAF,OAEpB,qBAAKP,UAAW,YAAhB,SAIMO,EAASC,KAAI,SAAAT,GAAO,OACpB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQI,WCRhBM,G,MAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAhB,OAErB,uBACCX,UAAU,SACVY,KAAK,SACLF,YAAaA,EACbG,SAAUF,MC+CAG,G,wDAjDb,aAAe,IAAD,8BAEZ,gBAmBFH,aAAe,SAACI,GACZ,EAAKC,SAAS,CAACC,YAAaF,EAAEG,OAAOC,SAlBvC,EAAKC,MAAQ,CACXb,SAAU,GACVU,YAAa,IANH,E,gEAaO,IAAD,OAElBI,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAACT,SAAUkB,S,+BAQlC,IAAD,EAE6BC,KAAKN,MAA/Bb,EAFH,EAEGA,SAAUU,EAFb,EAEaA,YACZU,EAAmBpB,EAASqB,QAAO,SAAA7B,GAAO,OAC9CA,EAAQK,KAAKyB,cAAcC,SAASb,EAAYY,kBAIlD,OACE,sBAAK7B,UAAU,MAAf,UACA,oDAEA,cAAC,EAAD,CACEU,YAAY,kBACZC,aAAce,KAAKf,eAGrB,cAAC,EAAD,CAAUJ,SAAWoB,W,GA5CXI,cCMHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.81a4a130.chunk.js","sourcesContent":["import React from 'react';\n\nimport './card.style.css';\n\nexport const Card = ({monster}) => (\n    \n    <div className='card-container'>\n        \n        <img alt=\"monster\" src={`https://robohash.org/${monster.id}?set=set2&size=250x250`}/>\n        <h2> { monster.name } </h2>\n        <p>{ monster.email }</p>\n    </div>\n\n)","import React from 'react';\nimport { Card } from '../card/card.component';\n\nimport './card-list.style.css';\n\nexport const CardList = ({monsters}) => (\n    \n    <div className= 'card-list'>\n\n        { \n              \n          monsters.map(monster => \n          <Card key={monster.id} monster={monster}/>\n        \n          )\n        }\n\n    </div>\n\n);","import React from 'react';\n\nimport './search-box.style.css';\n\nexport const SearchBox = ({ placeholder, handleChange }) => (\n\n    <input\n     className='search'\n     type='search' \n     placeholder={placeholder} \n     onChange={handleChange} \n    />\n\n);\n","import React, { Component } from 'react';\n\nimport { CardList } from './components/card-list/card-list.component';\nimport { SearchBox } from './components/search-box/search-box.component';\nimport './App.css';\n\nclass App extends Component {\n  \n  constructor() {\n     \n    super();\n\n    this.state = {\n      monsters: [],\n      searchField: ''\n    };\n\n    // this.handleChange = this.handleChange.bind(this);\n\n  }\n\n  componentDidMount() {\n\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then(response => response.json())\n      .then(users => this.setState({monsters: users}));\n\n  }\n\n  handleChange = (e) => {\n      this.setState({searchField: e.target.value});\n  }\n\n  render() {\n\n      const { monsters, searchField } = this.state;\n      const filteredMonsters = monsters.filter(monster => \n        monster.name.toLowerCase().includes(searchField.toLowerCase())\n        \n        )\n\n      return (\n        <div className=\"App\">\n        <h1> Monsters Rolodex </h1>\n\n        <SearchBox\n          placeholder='Search Monsters'\n          handleChange={this.handleChange}\n        />\n\n        <CardList monsters={ filteredMonsters } />\n\n        </div>\n      );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}